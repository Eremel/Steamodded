[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

#modulate_sound()
[[patches]]
[patches.pattern] 
target = 'functions/misc_functions.lua'
pattern = 'G.SOUND_MANAGER.channel:push(G.ARGS.push)'
match_indent = true
position = 'after'
payload = '''
if 
	SMODS.previous_track and SMODS.previous_track ~= desired_track and
	(SMODS.Sounds[desired_track] or {}).no_sync
then
	G.ARGS.push.type = 'restart_music'
	G.SOUND_MANAGER.channel:push(G.ARGS.push)
end
SMODS.previous_track = desired_track'''

[[patches]]
[patches.pattern] 
target = 'functions/misc_functions.lua'
pattern = 'G.ARGS.push.ambient_control = G.SETTINGS.ambient_control'
match_indent = true
position = 'after'
payload = '''
local replace_sound = SMODS.Sound.replace_sounds[desired_track]
if replace_sound then
	desired_track = replace_sound.key
	G.ARGS.push.desired_track = desired_track
end
if SMODS.Sound.stop_sounds[desired_track] then return end
'''

[[patches]]
[patches.pattern] 
target = 'functions/misc_functions.lua'
pattern = "(G.STATE == G.STATES.SPLASH and '') or"
match_indent = true
position = 'after'
payload = 'SMODS.Sound:get_current_music() or'

# PLAY_SOUND 
[[patches]]
[patches.pattern]
target = 'engine/sound_manager.lua'
pattern = '''local s = {sound = love.audio.newSource("resources/sounds/"..args.sound_code..'.ogg', should_stream and "stream" or 'static')}'''
match_indent = true
position = 'at'
payload = '''
local s = SMODS_Sounds[args.sound_code] or
{sound = love.audio.newSource("resources/sounds/"..args.sound_code..'.ogg', should_stream and "stream" or 'static')}''' 

# pass in custom sounds
[[patches]]
[patches.pattern]
target = 'engine/sound_manager.lua'
pattern = "DISABLE_SFX = false"
match_indent = true
position = 'after'
payload = '''
SMODS_Sounds = {}
'''
[[patches]]
[patches.pattern]
target = 'engine/sound_manager.lua'
pattern = "elseif request.type == 'stop' then"
match_indent = true
position = 'before'
payload = '''
elseif request.type == 'sound_source' then
	SMODS_Sounds[request.sound_code] = {
		sound_code = request.sound_code,
		sound = request.sound,
		modded_source = true,
		per = request.per,
		vol = request.vol,
	}
	SOURCES[request.sound_code] = {}
	table.insert(SOURCES[request.sound_code], SMODS_Sounds[request.sound_code])
    request.sound:setVolume(0)
    love.audio.play(request.sound)
	request.sound:stop()
'''

[[patches]]
[patches.pattern]
target = 'engine/sound_manager.lua'
pattern = "if not v[i].sound:isPlaying() then"
match_indent = true
position = 'at'
payload = 'if not v[i].sound:isPlaying() and not v[i].modded_source then'


[[patches]]
[patches.pattern]
target = 'engine/sound_manager.lua'
pattern = "s.original_pitch = args.per or 1"
match_indent = true
position = 'at'
payload = 's.original_pitch = s.per or args.per or 1'

[[patches]]
[patches.pattern]
target = 'engine/sound_manager.lua'
pattern = "s.original_volume = args.vol or 1"
match_indent = true
position = 'at'
payload = 's.original_volume = s.vol or args.vol or 1'

[[patches]]
[patches.pattern]
target = 'engine/sound_manager.lua'
pattern = "s.original_pitch = args.per or 1"
match_indent = true
position = 'at'
payload = 's.original_pitch = s.per or args.per or 1'

[[patches]]
[patches.pattern]
target = 'engine/sound_manager.lua'
pattern = "s.original_volume = args.vol or 1"
match_indent = true
position = 'at'
payload = 's.original_volume = s.vol or args.vol or 1'

# don't crash RESTART_MUSIC

[[patches]]
[patches.pattern]
target = 'engine/sound_manager.lua'
pattern = "RESTART_MUSIC()"
match_indent = true
position = 'at'
payload = 'RESTART_MUSIC(request)'